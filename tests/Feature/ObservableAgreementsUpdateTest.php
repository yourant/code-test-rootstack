<?php

namespace Tests\Feature;

use App\Models\Agreement;
use App\Models\Client;
use App\Models\Provider;
use App\Models\Service;
use App\Models\User;
use App\Repositories\AgreementRepository;
use App\Repositories\ClientRepository;
use App\Repositories\ProviderRepository;
use App\Repositories\ServiceRepository;
use App\Repositories\UserRepository;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ObservableAgreementsUpdateTest extends TestCase
{

    private $agreementRepository;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->agreementRepository = (new AgreementRepository((new Agreement)));
    }

    /** @test */
    public function agreements_update()
    {

        $agreementRepository = (new AgreementRepository((new Agreement)));
        $agreementRepository->search()->chunk(1000, function ($agreements) use ($agreementRepository) {
            foreach ($agreements as $agreement) {
                $agreementRepository->update($agreement, ['enabled' => false]);
            }
        });


        $this->assertTrue(true);
    }

    /**
     * @test
     */
    public function client_update()
    {

        $clientRepository = (new ClientRepository((new Client)));
        $clientRepository->search()->chunk(1000, function ($clients) use ($clientRepository) {
            foreach ($clients as $client) {
                $clientRepository->update($client, ['name' => 'prueba']);
            }
        });

        $this->assertTrue(true);
    }

    /**
     * @test
     */
    public function user_update()
    {

        $userRepository = (new UserRepository((new User)));

        $userRepository->search()->chunk(1000, function ($users) use ($userRepository) {
            foreach ($users as $user) {
                $userRepository->update($user, ['enabled' => false]);
            }
        });


        $this->assertTrue(true);
    }

    /**
     * @test
     */
    public function service_update()
    {

        $serviceRepository = (new ServiceRepository((new Service)));
        $items = $serviceRepository->search()->take(10)->get();

        $service_ids = [];
        foreach($items as $item){
            $item->makeVisible('id');
            $service_ids[] = $item->id;
        }
        $agreements = $this->agreementRepository->search(['service_id' => $service_ids])->get()->count();
        echo "\nService test: {$agreements} Agreements \n";


        foreach ($items as $item) {
            $serviceRepository->update($item, ['name' => 'prueba']);
        }

        $this->assertTrue(true);
    }

    /**
     * @test
     */
    public function provider_update()
    {

        $providerRepository = (new ProviderRepository((new Provider)));
        $items = $providerRepository->search()->take(10)->get();

        $providers_ids = [];
        foreach($items as $item){
            $item->makeVisible('id');
            $providers_ids[] = $item->id;
        }
        $agreements = $this->agreementRepository->search(['provider_id' => $providers_ids])->get()->count();
        echo "\nProvider test: {$agreements} Agreements\n";

        foreach ($items as $item) {
            $providerRepository->update($item, ['name' => 'prueba']);
        }

        $this->assertTrue(true);
    }
}
